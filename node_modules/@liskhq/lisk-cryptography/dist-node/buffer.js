'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.hexToBuffer = exports.bufferToHex = exports.bufferToBigNumberString = exports.bigNumberToBuffer = undefined;

var _browserifyBignum = require('browserify-bignum');

var _browserifyBignum2 = _interopRequireDefault(_browserifyBignum);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var bigNumberToBuffer = exports.bigNumberToBuffer = function bigNumberToBuffer(bignumber, size) {
	return (0, _browserifyBignum2.default)(bignumber).toBuffer({ size: size });
}; /*
    * Copyright Â© 2018 Lisk Foundation
    *
    * See the LICENSE file at the top-level directory of this distribution
    * for licensing information.
    *
    * Unless otherwise agreed in a custom licensing agreement with the Lisk Foundation,
    * no part of this software, including this file, may be copied, modified,
    * propagated, or distributed except according to the terms contained in the
    * LICENSE file.
    *
    * Removal or modification of this copyright notice is prohibited.
    *
    */
var bufferToBigNumberString = exports.bufferToBigNumberString = function bufferToBigNumberString(bigNumberBuffer) {
	return _browserifyBignum2.default.fromBuffer(bigNumberBuffer).toString();
};

var bufferToHex = exports.bufferToHex = function bufferToHex(buffer) {
	return Buffer.from(buffer).toString('hex');
};

var hexRegex = /^[0-9a-f]+/i;
var hexToBuffer = exports.hexToBuffer = function hexToBuffer(hex) {
	var argumentName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Argument';

	if (typeof hex !== 'string') {
		throw new TypeError(argumentName + ' must be a string.');
	}
	var matchedHex = (hex.match(hexRegex) || [])[0];
	if (!matchedHex || matchedHex.length !== hex.length) {
		throw new TypeError(argumentName + ' must be a valid hex string.');
	}
	if (matchedHex.length % 2 !== 0) {
		throw new TypeError(argumentName + ' must have a valid length of hex string.');
	}
	return Buffer.from(matchedHex, 'hex');
};